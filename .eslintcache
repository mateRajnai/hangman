[{"/home/mate/Advanced/hangman/src/index.js":"1","/home/mate/Advanced/hangman/src/App.js":"2","/home/mate/Advanced/hangman/src/components/Game.js":"3","/home/mate/Advanced/hangman/src/components/Drawing.js":"4","/home/mate/Advanced/hangman/src/components/WrongLetters.js":"5","/home/mate/Advanced/hangman/src/components/CorrectLetters.js":"6","/home/mate/Advanced/hangman/src/components/GuessedLetter.js":"7","/home/mate/Advanced/hangman/src/context/LettersContext.js":"8","/home/mate/Advanced/hangman/src/components/CorrectLetter.js":"9","/home/mate/Advanced/hangman/src/components/WrongLetter.js":"10","/home/mate/Advanced/hangman/src/context/GameContext.js":"11","/home/mate/Advanced/hangman/src/components/GameEndingFeedback.js":"12","/home/mate/Advanced/hangman/src/context/VocabularyContext.js":"13","/home/mate/Advanced/hangman/src/components/Vocabulary.js":"14","/home/mate/Advanced/hangman/src/components/Header.js":"15","/home/mate/Advanced/hangman/src/components/Content.js":"16"},{"size":176,"mtime":1607525992777,"results":"17","hashOfConfig":"18"},{"size":890,"mtime":1608121591105,"results":"19","hashOfConfig":"18"},{"size":1351,"mtime":1608122262163,"results":"20","hashOfConfig":"18"},{"size":2986,"mtime":1608122220599,"results":"21","hashOfConfig":"18"},{"size":632,"mtime":1607691329863,"results":"22","hashOfConfig":"18"},{"size":1030,"mtime":1608025047783,"results":"23","hashOfConfig":"18"},{"size":1295,"mtime":1608122478192,"results":"24","hashOfConfig":"18"},{"size":2440,"mtime":1608115222448,"results":"25","hashOfConfig":"18"},{"size":377,"mtime":1608024714983,"results":"26","hashOfConfig":"18"},{"size":284,"mtime":1607689060737,"results":"27","hashOfConfig":"18"},{"size":785,"mtime":1608115737409,"results":"28","hashOfConfig":"18"},{"size":1534,"mtime":1608023875915,"results":"29","hashOfConfig":"18"},{"size":1483,"mtime":1608024524734,"results":"30","hashOfConfig":"18"},{"size":1241,"mtime":1608121790065,"results":"31","hashOfConfig":"18"},{"size":732,"mtime":1608121858718,"results":"32","hashOfConfig":"18"},{"size":617,"mtime":1608121475041,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"j4h2dx",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/home/mate/Advanced/hangman/src/index.js",[],["70","71"],"/home/mate/Advanced/hangman/src/App.js",[],"/home/mate/Advanced/hangman/src/components/Game.js",[],"/home/mate/Advanced/hangman/src/components/Drawing.js",["72","73"],"/home/mate/Advanced/hangman/src/components/WrongLetters.js",[],"/home/mate/Advanced/hangman/src/components/CorrectLetters.js",["74"],"import React, {useContext, useEffect} from 'react';\nimport styled from 'styled-components';\nimport {LettersContext} from '../context/LettersContext';\nimport {GameContext} from '../context/GameContext';\nimport CorrectLetter from './CorrectLetter';\nimport {v4 as uuidv4} from 'uuid';\n\nconst CorrectLetters = () => {\n\n    const {correctLetters} = useContext(LettersContext);\n    const {setIsEndOfGame, setIsPlayerWon} = useContext(GameContext);\n\n    useEffect(() => {\n        if (!correctLetters.includes(null) && correctLetters.length !== 0) {\n            setIsEndOfGame(true);\n            setIsPlayerWon(true);\n        }\n    }, [correctLetters])    \n    \n\n    return (\n    <StyleWrapper id=\"correct-letters\" className=\"styled-div\">\n        {correctLetters.map(letter => \n            <CorrectLetter key={uuidv4()} letter={letter}/> \n            )}  \n    </StyleWrapper>\n    )\n}\n\nexport default CorrectLetters;\n\nconst StyleWrapper = styled.div`\n    flex: 4;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;","/home/mate/Advanced/hangman/src/components/GuessedLetter.js",[],"/home/mate/Advanced/hangman/src/context/LettersContext.js",["75"],"import React, {useState, useEffect, useContext} from 'react';\nimport {VocabularyContext} from './VocabularyContext';\n\nexport const LettersContext = React.createContext();\n\nexport const LettersProvider = (props) => {\n\n    const {generatedWord} = useContext(VocabularyContext);\n\n    const [correctLetters, setCorrectLetters] = useState([]);\n    const [wrongLetters, setWrongLetters] = useState([]);\n    const [isLastlyGuessedLetterWrong, setIsLastlyGuessedLetterWrong] = useState();\n\n    const checkGuessedLetterWasAlreadyGuessed = (e) => {\n        const guessedLetter = e.target.getAttribute(\"data-guessed-letter\");\n        console.log(guessedLetter);\n        const isAlreadyGuessed = wrongLetters.includes(guessedLetter) || correctLetters.includes(guessedLetter);\n        if (!isAlreadyGuessed) \n            saveGuessedLetter(guessedLetter);\n    }\n\n\n    const saveGuessedLetter = (guessedLetter) => {\n        let guessedLetterIsWrong = true;\n        let correctLettersToBeUpdated = [...correctLetters];\n        for (let i = 0; i < generatedWord.length; i++) {\n            if (generatedWord.charAt(i) === guessedLetter) {\n                correctLettersToBeUpdated[i] = generatedWord.charAt(i);\n                guessedLetterIsWrong = false;\n            }\n        }\n        if (guessedLetterIsWrong) {\n            setWrongLetters([...wrongLetters, guessedLetter]);\n            setIsLastlyGuessedLetterWrong(true);  \n        } else {\n            setCorrectLetters(correctLettersToBeUpdated);\n            setIsLastlyGuessedLetterWrong(false);\n        }\n    }\n\n    useEffect(() => {\n        let correctLettersInitialization = [];\n        for (let i = 0; i < generatedWord.length; i++) {\n            correctLettersInitialization[i] = null;\n        }\n        console.log(\"LETTERS CONTEXT\")\n        console.log(correctLetters)\n        setCorrectLetters(correctLettersInitialization)\n        setWrongLetters([]);\n        console.log(\"----------\")\n        \n    }, [generatedWord])\n\n\n    useEffect(() => {\n        console.log(generatedWord);\n        console.log(wrongLetters)\n        console.log(correctLetters)\n    }, [correctLetters, wrongLetters, generatedWord])\n\n\n    return (\n        <LettersContext.Provider value={{\n            checkGuessedLetterWasAlreadyGuessed,\n            correctLetters,\n            wrongLetters,\n            isLastlyGuessedLetterWrong\n        }} >\n            {props.children}\n        </LettersContext.Provider>\n    );\n};\n","/home/mate/Advanced/hangman/src/components/CorrectLetter.js",[],"/home/mate/Advanced/hangman/src/components/WrongLetter.js",[],"/home/mate/Advanced/hangman/src/context/GameContext.js",["76"],"import React, {useEffect, useState, useContext} from 'react';\nimport {VocabularyContext} from './VocabularyContext';\n\nexport const GameContext = React.createContext();\n\nexport const GameProvider = (props) => {\n\n    const [isEndOfGame, setIsEndOfGame] = useState(false);\n    const [isPlayerWon, setIsPlayerWon] = useState(false);\n    const {generateWord} = useContext(VocabularyContext);\n\n    const startNewGame = (e) => {\n        setIsEndOfGame(false);\n        setIsPlayerWon(false);\n        generateWord(e);\n    }\n\n\n    return (\n        <GameContext.Provider value={{\n            isEndOfGame,\n            setIsEndOfGame, \n            isPlayerWon, \n            setIsPlayerWon,\n            startNewGame\n        }}>\n            {props.children}\n        </GameContext.Provider>\n    );\n};\n","/home/mate/Advanced/hangman/src/components/GameEndingFeedback.js",[],"/home/mate/Advanced/hangman/src/context/VocabularyContext.js",[],"/home/mate/Advanced/hangman/src/components/Vocabulary.js",[],"/home/mate/Advanced/hangman/src/components/Header.js",[],"/home/mate/Advanced/hangman/src/components/Content.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":28,"column":8,"nodeType":"83","endLine":28,"endColumn":63,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"85","line":36,"column":8,"nodeType":"83","endLine":36,"endColumn":23,"suggestions":"86"},{"ruleId":"81","severity":1,"message":"87","line":18,"column":8,"nodeType":"83","endLine":18,"endColumn":24,"suggestions":"88"},{"ruleId":"81","severity":1,"message":"89","line":52,"column":8,"nodeType":"83","endLine":52,"endColumn":23,"suggestions":"90"},{"ruleId":"91","severity":1,"message":"92","line":1,"column":16,"nodeType":"93","messageId":"94","endLine":1,"endColumn":25},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'drawingParts', 'indexOfDrawingParts', and 'setIsEndOfGame'. Either include them or remove the dependency array.","ArrayExpression",["97"],"React Hook useEffect has a missing dependency: 'drawingParts'. Either include it or remove the dependency array.",["98"],"React Hook useEffect has missing dependencies: 'setIsEndOfGame' and 'setIsPlayerWon'. Either include them or remove the dependency array.",["99"],"React Hook useEffect has a missing dependency: 'correctLetters'. Either include it or remove the dependency array.",["100"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},"Update the dependencies array to be: [wrongLetters, isLastlyGuessedLetterWrong, isEndOfGame, drawingParts, indexOfDrawingParts, setIsEndOfGame]",{"range":"109","text":"110"},"Update the dependencies array to be: [drawingParts, generatedWord]",{"range":"111","text":"112"},"Update the dependencies array to be: [correctLetters, setIsEndOfGame, setIsPlayerWon]",{"range":"113","text":"114"},"Update the dependencies array to be: [correctLetters, generatedWord]",{"range":"115","text":"116"},[1053,1108],"[wrongLetters, isLastlyGuessedLetterWrong, isEndOfGame, drawingParts, indexOfDrawingParts, setIsEndOfGame]",[1300,1315],"[drawingParts, generatedWord]",[627,643],"[correctLetters, setIsEndOfGame, setIsPlayerWon]",[1953,1968],"[correctLetters, generatedWord]"]